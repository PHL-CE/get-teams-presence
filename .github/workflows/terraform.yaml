name: Get Teams Presence Terraform Pipeline
run-name: Get Teams Presence Terraform ${{ inputs.terraform_action }} by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      # environment:
      #   description: 'Environment to run deployments against'
      #   type: environment
      #   required: true                
      #   default: 'development'
      tf_action:
        description: 'The action terraform should apply'
        type: choice
        options:
          - plan
          - apply
          - destroy
        required: true
        default: 'plan'
      build_container:
        type: choice
        options:
          - rebuild
          - nobuild
        required: true
        default: 'nobuild'

permissions:
  id-token: write
  contents: read

jobs:
  storage-acct:
    name: "Create Storage Account if not exists"
    runs-on: ubuntu-latest
    # environment: ${{ inputs.build_env }}

    env:
      STATE_STG_LOC: eastus2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@main

      - name: Read backend file
        run: cat terraform/backends/backend.conf >> ${GITHUB_ENV}

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check for Storage Account
        run: az storage account show --resource-group ${{env.resource_group_name}} --name ${{env.storage_account_name}} || echo "CREATE_STG=1" >> $GITHUB_ENV

      - name: Create State Storage Account
        if: ${{ env.CREATE_STG == 1 }}
        run: |
          az group create --location ${{env.STATE_STG_LOC}} --name ${{env.resource_group_name}}
          az storage account create --name ${{env.storage_account_name}} --location ${{env.STATE_STG_LOC}} --resource-group ${{env.resource_group_name}} --sku Standard_LRS
          az storage container create --name ${{env.container_name}} --account-name ${{env.storage_account_name}}
  
  
  terraform:
    name: "Terraform Build"
    needs: [storage-acct]
    runs-on: ubuntu-latest
    
    outputs: 
      SB_CONN_STRING: ${{ steps.outputs.outputs.SB_CONN_STRING }}
      QUEUE_NAME: ${{ steps.outputs.outputs.QUEUE_NAME }}
      CLIENT_ID: ${{ steps.outputs.outputs.CLIENT_ID }}
      EMAIL: ${{ steps.outputs.outputs.EMAIL }}
    
    env:
      WORKING_DIR: terraform
      ARM_USE_OIDC: true
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VERSION: 1.3.0

    steps:
      - name: Checkout Repository
        uses: actions/checkout@main

      - name: Read backend file
        working-directory: ${{ env.WORKING_DIR }}
        run: cat backends/backend.conf >> ${GITHUB_ENV}

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init -backend-config=backends/backend.conf

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan Apply
        id: plan-apply
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -var-file=vars/vars.tfvars

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.tf_action == 'apply'
        run: terraform apply -var-file=vars/vars.tfvars -auto-approve

      - name: Terraform Plan Destroy
        id: plan-destroy
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.tf_action == 'destroy'
        run: terraform plan -destroy -var-file=vars/vars.tfvars

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.tf_action == 'destroy'
        run: terraform destroy -var-file=vars/vars.tfvars -auto-approve

      - name: Capture Terraform Outputs
        id: outputs
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "SB_CONN_STRING=$(terraform output SB_CONN_STRING)" >> $GITHUB_OUTPUT
          echo "QUEUE_NAME=$(terraform output QUEUE_NAME)" >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$(terraform output CLIENT_ID)" >> $GITHUB_OUTPUT
          echo "EMAIL=$(terraform output EMAIL)" >> $GITHUB_OUTPUT

  deploy-app:
    name: Copy, Build and Deploy Docker Container
    runs-on: ubuntu-latest
    needs: terraform
    if: inputs.tf_action == 'apply'

    env: 
      DEST_DIR: programs
      FILENAME: get-teams-presence
      RESTART_POLICY: unless-stopped
      LOG_VOLUME: gtp-logs

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
    
    - name: Remove Existing Project Files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: rm -r ~/${{ env.DEST_DIR }}/${{ env.FILENAME }}

    - name: Copy Project to Host
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        source: "./"
        target: "~/${{ env.DEST_DIR }}/${{ env.FILENAME }}"
    
    - name : Build Docker Container on Host
      if: inputs.build_container == 'rebuild'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: docker build --tag ${{ env.FILENAME }} ~/${{ env.DEST_DIR }}/${{ env.FILENAME }}/.

    - name: Start Docker Container on Host
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          (docker stop ${{ env.FILENAME }} || true) && \
          (docker rm ${{ env.FILENAME }} || true) && \
          docker run -d \
            --name ${{ env.FILENAME }} ${{ env.FILENAME }}:latest \
            --volume ${{ env.LOG_VOLUME }}:/gtp/logs \
            --restart=${{ env.RESTART_POLICY }} \
            --build-arg sb_conn_string=${{needs.terraform.outputs.SB_CONN_STRING}} \
            --build-arg queue_name=${{needs.terraform.outputs.QUEUE_NAME}} \
            --build-arg client_id=${{needs.terraform.outputs.CLIENT_ID}} \
            --build-arg email=${{needs.terraform.outputs.EMAIL}} 